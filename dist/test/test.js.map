{"version":3,"sources":["test.js"],"names":["Object","defineProperty","exports","value","chai_1","require","lib_1","describe","it","expect","json2tree","to","not","be","an","a","Mock","path","eq","set","startsWith","endsWith","Error","x","b","y","c","z","key"],"mappings":"AAAA;AACA;AACA;;;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,SAASC,QAAQ,MAAR,CAAf;AACA,IAAMC,QAAQD,QAAQ,QAAR,CAAd;AACAA,QAAQ,OAAR;AACAE,SAAS,WAAT,EAAsB,YAAM;AACxBC,OAAG,cAAH,EAAmB,YAAM;AACrBJ,eAAOK,MAAP,CAAcH,MAAMI,SAApB,EAA+BC,EAA/B,CAAkCC,GAAlC,CAAsCC,EAAtC,CAAyCC,EAAzC,CAA4C,WAA5C;AACH,KAFD;AAGAN,OAAG,sBAAH,EAA2B,YAAM;AAC7BJ,eAAOK,MAAP,CAAcH,MAAMI,SAApB,EAA+BC,EAA/B,CAAkCE,EAAlC,CAAqCE,CAArC,CAAuC,UAAvC;AACH,KAFD;AAGH,CAPD;AAQAR,SAAS,WAAT,EAAsB,YAAM;AACxBC,OAAG,qBAAH,EAA0B,YAAM;AAAA,YACtBQ,IADsB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAEbC,IAFa,EAEPd,KAFO,EAEA;AACpBC,2BAAOK,MAAP,CAAcQ,IAAd,EAAoBN,EAApB,CAAuBO,EAAvB,CAA0B,MAA1B;AACAd,2BAAOK,MAAP,CAAcN,KAAd,EAAqBQ,EAArB,CAAwBO,EAAxB,CAA2B,QAA3B;AACH;AALuB;;AAAA;AAAA;;AAO5BZ,cAAMI,SAAN,CAAgB,MAAhB,EAAwB,QAAxB,EAAkCM,KAAKG,GAAvC;AACH,KARD;AASAX,OAAG,sBAAH,EAA2B,YAAM;AAAA,YACvBQ,IADuB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,oCAEdC,IAFc,EAERd,KAFQ,EAED;AACpBC,2BAAOK,MAAP,CAAcQ,KAAKG,UAAL,CAAgB,MAAhB,CAAd,EAAuCT,EAAvC,CAA0CO,EAA1C,CAA6C,IAA7C;AACAd,2BAAOK,MAAP,CAAcQ,KAAKI,QAAL,CAAc,GAAd,CAAd,EAAkCV,EAAlC,CAAqCO,EAArC,CAAwC,KAAxC;AACA,4BAAQD,IAAR;AACI,6BAAK,QAAL;AACI,kCAAM,IAAIK,KAAJ,CAAU,QAAV,CAAN;AACJ,6BAAK,UAAL;AACIlB,mCAAOK,MAAP,CAAcN,KAAd,EAAqBQ,EAArB,CAAwBO,EAAxB,CAA2B,CAA3B;AACA;AACJ,6BAAK,QAAL;AACI,kCAAM,IAAII,KAAJ,CAAU,QAAV,CAAN;AACJ,6BAAK,UAAL;AACIlB,mCAAOK,MAAP,CAAcN,KAAd,EAAqBQ,EAArB,CAAwBO,EAAxB,CAA2B,IAA3B;AACA;AACJ,6BAAK,QAAL;AACI,kCAAM,IAAII,KAAJ,CAAU,QAAV,CAAN;AACJ,6BAAK,UAAL;AACI,kCAAM,IAAIA,KAAJ,CAAU,UAAV,CAAN;AAdR;AAgBH;AArBwB;;AAAA;AAAA;;AAuB7BhB,cAAMI,SAAN,CAAgB,MAAhB,EAAwB;AACpBK,eAAG,EAAEQ,GAAG,CAAL,EADiB,EACPC,GAAG,EAAEC,GAAG,IAAL,EADI,EACSC,GAAG,EAAEC,GAAG,GAAL;AADZ,SAAxB,EAEG,UAACC,GAAD,EAAMzB,KAAN,EAAgB;AACf,gBAAIyB,QAAQ,UAAR,IAAsBzB,UAAU,GAApC,EAAyC;AACrCa,qBAAKG,GAAL,CAASS,GAAT,EAAczB,KAAd;AACH,aAFD,MAGK;AACD,uBAAO,KAAP;AACH;AACJ,SATD;AAUH,KAjCD;AAkCH,CA5CD","file":"test.js","sourcesContent":["\"use strict\";\n/* tslint:disable:max-classes-per-file */\n/* tslint:disable:no-shadowed-variable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chai_1 = require(\"chai\");\nconst lib_1 = require(\"../lib\");\nrequire(\"mocha\");\ndescribe(\"json2tree\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_1.json2tree).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_1.json2tree).to.be.a(\"function\");\n    });\n});\ndescribe(\"json2tree\", () => {\n    it(\"should map a string\", () => {\n        class Mock {\n            static set(path, value) {\n                chai_1.expect(path).to.eq(\"root\");\n                chai_1.expect(value).to.eq(\"string\");\n            }\n        }\n        lib_1.json2tree(\"root\", \"string\", Mock.set);\n    });\n    it(\"should map an object\", () => {\n        class Mock {\n            static set(path, value) {\n                chai_1.expect(path.startsWith(\"root\")).to.eq(true);\n                chai_1.expect(path.endsWith(\"/\")).to.eq(false);\n                switch (path) {\n                    case \"root/a\":\n                        throw new Error(\"root/a\");\n                    case \"root/a/x\":\n                        chai_1.expect(value).to.eq(1);\n                        break;\n                    case \"root/b\":\n                        throw new Error(\"root/b\");\n                    case \"root/b/y\":\n                        chai_1.expect(value).to.eq(true);\n                        break;\n                    case \"root/c\":\n                        throw new Error(\"root/c\");\n                    case \"root/c/z\":\n                        throw new Error(\"root/c/z\");\n                }\n            }\n        }\n        lib_1.json2tree(\"root\", {\n            a: { x: 1 }, b: { y: true }, c: { z: \"z\" },\n        }, (key, value) => {\n            if (key !== \"root/c/z\" && value !== \"z\") {\n                Mock.set(key, value);\n            }\n            else {\n                return false;\n            }\n        });\n    });\n});\n"]}