{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","array2tree","at2","path","array","apply","separator","startsWith","slice","endsWith","length","i","node","name","tree","object2tree","o2t","object","value_key","key","hasOwnProperty","default"],"mappings":"AAAA;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAD,QAAQE,UAAR,GAAqB,SAASC,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAkD;AAAA,QAAjBC,SAAiB,uEAAL,GAAK;;AACnE,QAAIH,SAAS,IAAT,IAAiBA,KAAKI,UAAL,CAAgBD,SAAhB,CAArB,EAAiD;AAC7CH,eAAOA,KAAKK,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIL,SAAS,IAAT,IAAiBA,KAAKM,QAAL,CAAcH,SAAd,CAArB,EAA+C;AAC3CH,eAAOA,KAAKK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAIJ,MAAMM,MAAN,GAAe,CAAnB,EAAsB;AAClB,YAAMV,QAAQI,MAAM,CAAN,CAAd;AACA,YAAI,UAAUC,MAAMF,IAAN,EAAYH,KAAZ,CAAd,EAAkC;AAC9B,mBAAO,KAAP;AACH;AACD,aAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIP,MAAMM,MAA1B,EAAkCC,GAAlC,EAAuC;AACnC,gBAAMC,OAAOR,MAAMO,CAAN,CAAb;AACA,gBAAIC,KAAKF,MAAL,GAAc,CAAlB,EAAqB;AACjB,oBAAMG,OAAOD,KAAK,CAAL,CAAb;AACA,oBAAME,OAAOF,KAAK,CAAL,CAAb;AACA,oBAAI,UAAUV,UAAOC,QAAQ,EAAf,IAAoBG,SAApB,GAAgCO,IAAhC,EAAwCC,IAAxC,EAA8CT,KAA9C,EAAqDC,YAAYA,SAAjE,CAAd,EAA2F;AACvF,2BAAO,KAAP;AACH;AACJ,aAND,MAOK;AACD;AACH;AACJ;AACD,eAAO,IAAP;AACH;AACD,WAAO,KAAP;AACH,CA5BD;AA6BA;;;;;;;;;;;;;AAaAP,QAAQgB,WAAR,GAAsB,SAASC,GAAT,CAAab,IAAb,EAAmBc,MAAnB,EAA2BZ,KAA3B,EAAoE;AAAA,QAAlCC,SAAkC,uEAAtB,GAAsB;AAAA,QAAjBY,SAAiB,uEAAL,GAAK;;AACtF,QAAIf,SAAS,IAAT,IAAiBA,KAAKI,UAAL,CAAgBD,SAAhB,CAArB,EAAiD;AAC7CH,eAAOA,KAAKK,KAAL,CAAW,CAAX,CAAP;AACH;AACD,QAAIL,SAAS,IAAT,IAAiBA,KAAKM,QAAL,CAAcH,SAAd,CAArB,EAA+C;AAC3CH,eAAOA,KAAKK,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH;AACD,QAAIS,WAAW,IAAf,EAAqB;AACjB,YAAI,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC5B,iBAAK,IAAME,GAAX,IAAkBF,MAAlB,EAA0B;AACtB,oBAAIA,OAAOG,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;AAC5B,wBAAIA,QAAQD,SAAZ,EAAuB;AACnB,4BAAI,UAAUb,MAAMF,IAAN,EAAYc,OAAOC,SAAP,CAAZ,CAAd,EAA8C;AAC1C,mCAAO,KAAP;AACH;AACJ,qBAJD,MAKK;AACD,4BAAI,UAAUF,KAAOb,QAAQ,EAAf,UAAqBgB,GAArB,EAA4BF,OAAOE,GAAP,CAA5B,EAAyCd,KAAzC,EAAgDC,YAAYA,SAA5D,EAAuEY,YAAYA,SAAnF,CAAd,EAA6G;AACzG,mCAAO,KAAP;AACH;AACJ;AACJ;AACJ;AACD,mBAAO,IAAP;AACH,SAhBD,MAiBK;AACD,mBAAOb,MAAMF,IAAN,EAAYc,MAAZ,MAAwB,KAA/B;AACH;AACJ,KArBD,MAsBK;AACD,eAAOZ,MAAMF,IAAN,EAAYc,MAAZ,MAAwB,KAA/B;AACH;AACJ,CAhCD;AAiCAlB,QAAQsB,OAAR,GAAkBtB,QAAQgB,WAA1B","file":"index.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Maps recursively an array via an `apply` function, until the array\n * is completely mapped, or `apply` returns `false`. The structure of\n * the array should comply to:\n *\n * (1) the item at index `0` should be the *value* for a given node,\n *     which can be `null` for the root node;\n *\n * (2) the items at index `1` or higher should be arrays, representing\n *     sub-nodes (if any);\n *\n * (3) the item at index `0` of these arrays representing sub-nodes,\n *     should be the *name* of the corresponding sub-node;\n *\n * (4) the item at index `1` of these sub-node arrays, should be yet\n *     another array representing the sub-tree under the sub-node.\n *\n * Essentially, the array is a fully recursive structure, except the outer\n * most layer where the name of the node for the given path is dropped.\n *\n * @param path path of a node to map to, where `null` implies root\n * @param object object to be mapped via the `apply` function\n * @param apply function via which the array values are mapped\n * @param separator separator string between path elements\n *\n * @returns true upon a complete mapping, otherwise false\n */\nexports.array2tree = function at2(path, array, apply, separator = \"/\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    if (array.length > 0) {\n        const value = array[0];\n        if (false === apply(path, value)) {\n            return false;\n        }\n        for (let i = 1; i < array.length; i++) {\n            const node = array[i];\n            if (node.length > 1) {\n                const name = node[0];\n                const tree = node[1];\n                if (false === at2(`${path || \"\"}${separator}${name}`, tree, apply, separator = separator)) {\n                    return false;\n                }\n            }\n            else {\n                continue;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n/**\n * Maps recursively a JSON-like object via an `apply` function, until the\n * object is completely mapped or `apply` returns `false`.\n *\n * @param path path of a node to map to, where `null` implies root\n * @param object object to be mapped via the `apply` function\n * @param apply function via which the object values are mapped\n *\n * @param separator separator string between path elements\n * @param value_key default value key for node values\n *\n * @returns true upon a complete mapping, otherwise false\n */\nexports.object2tree = function o2t(path, object, apply, separator = \"/\", value_key = \"_\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    if (object !== null) {\n        if (typeof object === \"object\") {\n            for (const key in object) {\n                if (object.hasOwnProperty(key)) {\n                    if (key === value_key) {\n                        if (false === apply(path, object[value_key])) {\n                            return false;\n                        }\n                    }\n                    else {\n                        if (false === o2t(`${path || \"\"}/${key}`, object[key], apply, separator = separator, value_key = value_key)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n        else {\n            return apply(path, object) !== false;\n        }\n    }\n    else {\n        return apply(path, object) !== false;\n    }\n};\nexports.default = exports.object2tree;\n"]}