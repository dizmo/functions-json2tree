{"version":3,"sources":["test.js"],"names":["Object","defineProperty","exports","value","chai_1","require","lib_1","lib_2","mock_1","describe","it","expect","array2tree","to","not","be","an","a","object2tree","mapped","key","TreeMock","apply","eq","undefined","_","i","j","k","x","y","z","b","c"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chai_1 = require(\"chai\");\nconst lib_1 = require(\"../lib\");\nconst lib_2 = require(\"../lib\");\nconst mock_1 = require(\"./mock\");\nrequire(\"mocha\");\ndescribe(\"array2tree\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_1.array2tree).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_1.array2tree).to.be.a(\"function\");\n    });\n});\ndescribe(\"object2tree\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_2.object2tree).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_2.object2tree).to.be.a(\"function\");\n    });\n});\ndescribe(\"array2tree\", () => {\n    it(\"should map array to 'a' node of tree\", () => {\n        const mapped = lib_1.array2tree(\"a\", [\n            \"α\",\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map array to 'b' node of tree\", () => {\n        const mapped = lib_1.array2tree(\"b\", [\n            \"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map array to 'c' node of tree\", () => {\n        const mapped = lib_1.array2tree(\"c\", [\n            \"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map array to root node of tree\", () => {\n        const mapped = lib_1.array2tree(null, [\n            undefined,\n            [\"a\", [\"α\"]],\n            [\"b\", [\"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]]]],\n            [\"c\", [\"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]]]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n});\ndescribe(\"object2tree\", () => {\n    it(\"should map string to 'a' node of tree\", () => {\n        const mapped = lib_2.object2tree(\"a\", \"α\", (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map object to 'b' node of tree\", () => {\n        const mapped = lib_2.object2tree(\"b\", {\n            _: \"β\", i: 0, j: 1, k: 2,\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map object to 'c' node of tree\", () => {\n        const mapped = lib_2.object2tree(\"c\", {\n            _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } },\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n    it(\"should map object to root node of tree\", () => {\n        const mapped = lib_2.object2tree(null, {\n            a: \"α\",\n            b: { _: \"β\", i: 0, j: 1, k: 2 },\n            c: { _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } } },\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n        chai_1.expect(mapped).to.eq(true);\n    });\n});\n"],"file":"test.js"}