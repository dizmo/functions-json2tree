{"version":3,"sources":["test.js"],"names":["Object","defineProperty","exports","value","chai_1","require","lib_1","lib_2","mock_1","describe","it","expect","array2tree","to","not","be","an","a","object2tree","key","TreeMock","apply","undefined","_","i","j","k","x","y","z","b","c"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,SAASC,QAAQ,MAAR,CAAf;AACA,IAAMC,QAAQD,QAAQ,QAAR,CAAd;AACA,IAAME,QAAQF,QAAQ,QAAR,CAAd;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AACAA,QAAQ,OAAR;AACAI,SAAS,YAAT,EAAuB,YAAM;AACzBC,OAAG,cAAH,EAAmB,YAAM;AACrBN,eAAOO,MAAP,CAAcL,MAAMM,UAApB,EAAgCC,EAAhC,CAAmCC,GAAnC,CAAuCC,EAAvC,CAA0CC,EAA1C,CAA6C,WAA7C;AACH,KAFD;AAGAN,OAAG,sBAAH,EAA2B,YAAM;AAC7BN,eAAOO,MAAP,CAAcL,MAAMM,UAApB,EAAgCC,EAAhC,CAAmCE,EAAnC,CAAsCE,CAAtC,CAAwC,UAAxC;AACH,KAFD;AAGH,CAPD;AAQAR,SAAS,aAAT,EAAwB,YAAM;AAC1BC,OAAG,cAAH,EAAmB,YAAM;AACrBN,eAAOO,MAAP,CAAcJ,MAAMW,WAApB,EAAiCL,EAAjC,CAAoCC,GAApC,CAAwCC,EAAxC,CAA2CC,EAA3C,CAA8C,WAA9C;AACH,KAFD;AAGAN,OAAG,sBAAH,EAA2B,YAAM;AAC7BN,eAAOO,MAAP,CAAcJ,MAAMW,WAApB,EAAiCL,EAAjC,CAAoCE,EAApC,CAAuCE,CAAvC,CAAyC,UAAzC;AACH,KAFD;AAGH,CAPD;AAQAR,SAAS,YAAT,EAAuB,YAAM;AACzBC,OAAG,sCAAH,EAA2C,YAAM;AAC7CJ,cAAMM,UAAN,CAAiB,GAAjB,EAAsB,CAClB,GADkB,CAAtB,EAEG,UAACO,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAJD;AAKH,KAND;AAOAO,OAAG,sCAAH,EAA2C,YAAM;AAC7CJ,cAAMM,UAAN,CAAiB,GAAjB,EAAsB,CAClB,GADkB,EACb,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CADa,EACD,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CADC,EACW,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CADX,CAAtB,EAEG,UAACO,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAJD;AAKH,KAND;AAOAO,OAAG,sCAAH,EAA2C,YAAM;AAC7CJ,cAAMM,UAAN,CAAiB,GAAjB,EAAsB,CAClB,GADkB,EACb,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,CAAN,CAAN,CAAN,CAAN,CAAN,CADa,CAAtB,EAEG,UAACO,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAJD;AAKH,KAND;AAOAO,OAAG,uCAAH,EAA4C,YAAM;AAC9CJ,cAAMM,UAAN,CAAiB,IAAjB,EAAuB,CACnBU,SADmB,EAEnB,CAAC,GAAD,EAAM,CAAC,GAAD,CAAN,CAFmB,EAGnB,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CAAN,EAAkB,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CAAlB,EAA8B,CAAC,GAAD,EAAM,CAAC,CAAD,CAAN,CAA9B,CAAN,CAHmB,EAInB,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,EAAM,CAAC,GAAD,CAAN,CAAN,CAAN,CAAN,CAAN,CAAN,CAAN,CAJmB,CAAvB,EAKG,UAACH,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAPD;AAQH,KATD;AAUH,CAhCD;AAiCAM,SAAS,aAAT,EAAwB,YAAM;AAC1BC,OAAG,uCAAH,EAA4C,YAAM;AAC9CH,cAAMW,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B,UAACC,GAAD,EAAMhB,KAAN,EAAgB;AACxCK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAFD;AAGH,KAJD;AAKAO,OAAG,uCAAH,EAA4C,YAAM;AAC9CH,cAAMW,WAAN,CAAkB,GAAlB,EAAuB;AACnBK,eAAG,GADgB,EACXC,GAAG,CADQ,EACLC,GAAG,CADE,EACCC,GAAG;AADJ,SAAvB,EAEG,UAACP,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAJD;AAKH,KAND;AAOAO,OAAG,uCAAH,EAA4C,YAAM;AAC9CH,cAAMW,WAAN,CAAkB,GAAlB,EAAuB;AACnBK,eAAG,GADgB,EACXI,GAAG,EAAEJ,GAAG,GAAL,EAAUK,GAAG,EAAEL,GAAG,GAAL,EAAUM,GAAG,GAAb,EAAb;AADQ,SAAvB,EAEG,UAACV,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAJD;AAKH,KAND;AAOAO,OAAG,wCAAH,EAA6C,YAAM;AAC/CH,cAAMW,WAAN,CAAkB,IAAlB,EAAwB;AACpBD,eAAG,GADiB;AAEpBa,eAAG,EAAEP,GAAG,GAAL,EAAUC,GAAG,CAAb,EAAgBC,GAAG,CAAnB,EAAsBC,GAAG,CAAzB,EAFiB;AAGpBK,eAAG,EAAER,GAAG,GAAL,EAAUI,GAAG,EAAEJ,GAAG,GAAL,EAAUK,GAAG,EAAEL,GAAG,GAAL,EAAUM,GAAG,GAAb,EAAb,EAAb;AAHiB,SAAxB,EAIG,UAACV,GAAD,EAAMhB,KAAN,EAAgB;AACfK,mBAAOY,QAAP,CAAgBC,KAAhB,CAAsBF,GAAtB,EAA2BhB,KAA3B;AACH,SAND;AAOH,KARD;AASH,CA7BD","file":"test.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chai_1 = require(\"chai\");\nconst lib_1 = require(\"../lib\");\nconst lib_2 = require(\"../lib\");\nconst mock_1 = require(\"./mock\");\nrequire(\"mocha\");\ndescribe(\"array2tree\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_1.array2tree).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_1.array2tree).to.be.a(\"function\");\n    });\n});\ndescribe(\"object2tree\", () => {\n    it(\"should exist\", () => {\n        chai_1.expect(lib_2.object2tree).to.not.be.an(\"undefined\");\n    });\n    it(\"should be a function\", () => {\n        chai_1.expect(lib_2.object2tree).to.be.a(\"function\");\n    });\n});\ndescribe(\"array2tree\", () => {\n    it(\"should map array to 'a' node of tree\", () => {\n        lib_1.array2tree(\"a\", [\n            \"α\",\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map array to 'b' node of tree\", () => {\n        lib_1.array2tree(\"b\", [\n            \"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map array to 'c' node of tree\", () => {\n        lib_1.array2tree(\"c\", [\n            \"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map array to root node of tree\", () => {\n        lib_1.array2tree(null, [\n            undefined,\n            [\"a\", [\"α\"]],\n            [\"b\", [\"β\", [\"i\", [0]], [\"j\", [1]], [\"k\", [2]]]],\n            [\"c\", [\"γ\", [\"x\", [\"ξ\", [\"y\", [\"υ\", [\"z\", [\"ζ\"]]]]]]]],\n        ], (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n});\ndescribe(\"object2tree\", () => {\n    it(\"should map string to 'a' node of tree\", () => {\n        lib_2.object2tree(\"a\", \"α\", (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map object to 'b' node of tree\", () => {\n        lib_2.object2tree(\"b\", {\n            _: \"β\", i: 0, j: 1, k: 2,\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map object to 'c' node of tree\", () => {\n        lib_2.object2tree(\"c\", {\n            _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } },\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n    it(\"should map object to root node of tree\", () => {\n        lib_2.object2tree(null, {\n            a: \"α\",\n            b: { _: \"β\", i: 0, j: 1, k: 2 },\n            c: { _: \"γ\", x: { _: \"ξ\", y: { _: \"υ\", z: \"ζ\" } } },\n        }, (key, value) => {\n            mock_1.TreeMock.apply(key, value);\n        });\n    });\n});\n"]}