{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","array2tree","at2","path","array","apply","separator","startsWith","slice","endsWith","length","i","node","name","tree","object2tree","o2t","object","value_key","key","hasOwnProperty"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Maps recursively an array via an `apply` function, until the array\n * is completely mapped, or `apply` returns `false`. The structure of\n * the array should comply to:\n *\n * (1) the item at index `0` should be the *value* for a given node,\n *     which can be `null` for the root node;\n *\n * (2) the items at index `1` or higher should be arrays, representing\n *     sub-nodes (if any);\n *\n * (3) the item at index `0` of these arrays representing sub-nodes,\n *     should be the *name* of the corresponding sub-node;\n *\n * (4) the item at index `1` of these sub-node arrays, should be yet\n *     another array representing the sub-tree under the sub-node.\n *\n * Essentially, the array is a fully recursive structure, except the outer\n * most layer where the name of the node for the given path is dropped.\n *\n * @param path path of a node to map to, where `null` implies root\n * @param object object to be mapped via the `apply` function\n * @param apply function via which the array values are mapped\n * @param separator separator string between path elements\n *\n * @returns true upon a complete mapping, otherwise false\n */\nexports.array2tree = function at2(path, array, apply, separator = \"/\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    if (array.length > 0) {\n        const value = array[0];\n        if (false === apply(path, value)) {\n            return false;\n        }\n        for (let i = 1; i < array.length; i++) {\n            const node = array[i];\n            if (node.length > 1) {\n                const name = node[0];\n                const tree = node[1];\n                if (false === at2(`${path || \"\"}${separator}${name}`, tree, apply, separator = separator)) {\n                    return false;\n                }\n            }\n            else {\n                continue;\n            }\n        }\n        return true;\n    }\n    return false;\n};\n/**\n * Maps recursively a JSON-like object via an `apply` function, until the\n * object is completely mapped or `apply` returns `false`.\n *\n * @param path path of a node to map to, where `null` implies root\n * @param object object to be mapped via the `apply` function\n * @param apply function via which the object values are mapped\n *\n * @param separator separator string between path elements\n * @param value_key default value key for node values\n *\n * @returns true upon a complete mapping, otherwise false\n */\nexports.object2tree = function o2t(path, object, apply, separator = \"/\", value_key = \"_\") {\n    if (path !== null && path.startsWith(separator)) {\n        path = path.slice(1);\n    }\n    if (path !== null && path.endsWith(separator)) {\n        path = path.slice(0, -1);\n    }\n    if (object !== null) {\n        if (typeof object === \"object\") {\n            for (const key in object) {\n                if (object.hasOwnProperty(key)) {\n                    if (key === value_key) {\n                        if (false === apply(path, object[value_key])) {\n                            return false;\n                        }\n                    }\n                    else {\n                        if (false === o2t(`${path || \"\"}/${key}`, object[key], apply, separator = separator, value_key = value_key)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n        else {\n            return apply(path, object) !== false;\n        }\n    }\n    else {\n        return apply(path, object) !== false;\n    }\n};\nexports.default = exports.object2tree;\n"],"file":"index.js"}