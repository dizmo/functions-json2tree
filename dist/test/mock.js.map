{"version":3,"sources":["mock.js"],"names":["Object","defineProperty","exports","value","chai_1","require","TreeMock","path","undefined","expect","to","eq","Error"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;IACMC,Q;;;;;;;;;0BACWC,I,EAAMJ,K,EAAO;AACtB,cAAQI,IAAR;AACI,aAAK,IAAL;AACI,iBAAOC,SAAP;;AACJ,aAAK,GAAL;AACIJ,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ,aAAK,GAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ,aAAK,KAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,CAA3B;AACA;;AACJ,aAAK,KAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,CAA3B;AACA;;AACJ,aAAK,KAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,CAA3B;AACA;;AACJ,aAAK,GAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ,aAAK,KAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ,aAAK,OAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ,aAAK,SAAL;AACIP,UAAAA,MAAM,CAACK,MAAP,CAAcN,KAAd,EAAqBO,EAArB,CAAwBC,EAAxB,CAA2B,GAA3B;AACA;;AACJ;AACI,gBAAM,IAAIC,KAAJ,WAAaL,IAAb,iBAAwBJ,KAAxB,EAAN;AA/BR;AAiCH;;;;;;AAELD,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACAJ,OAAO,WAAP,GAAkBI,QAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst chai_1 = require(\"chai\");\nclass TreeMock {\n    static apply(path, value) {\n        switch (path) {\n            case null:\n                return undefined;\n            case \"a\":\n                chai_1.expect(value).to.eq(\"α\");\n                break;\n            case \"b\":\n                chai_1.expect(value).to.eq(\"β\");\n                break;\n            case \"b/i\":\n                chai_1.expect(value).to.eq(0);\n                break;\n            case \"b/j\":\n                chai_1.expect(value).to.eq(1);\n                break;\n            case \"b/k\":\n                chai_1.expect(value).to.eq(2);\n                break;\n            case \"c\":\n                chai_1.expect(value).to.eq(\"γ\");\n                break;\n            case \"c/x\":\n                chai_1.expect(value).to.eq(\"ξ\");\n                break;\n            case \"c/x/y\":\n                chai_1.expect(value).to.eq(\"υ\");\n                break;\n            case \"c/x/y/z\":\n                chai_1.expect(value).to.eq(\"ζ\");\n                break;\n            default:\n                throw new Error(`${path} => ${value}`);\n        }\n    }\n}\nexports.TreeMock = TreeMock;\nexports.default = TreeMock;\n"],"file":"mock.js"}